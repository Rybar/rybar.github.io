---
layout: post
title: JS13k 2017 postmortem
permalink: JS13k_2017_postmortem
---

what went right:
pixel art engine, strict palette decision
procedural greeble drawing
atmosphere
sound design
'feel' of player, really happy with opening scene, helpless head

what went wrong:
game scope got away from me a bit. ended up with a very short gameplay experience that didn't have everything in that i had planned.
Got stuck early on with collision woes; spent a week on and off dealing with this then towards the end new collision bugs that were  resolved with quick hacks, almost to disastrous effect. I didn't get to a state where everything was working well enough to design actual content for the game until about 3 days before the deadline. Almost no time for playtesting or room/level design tweaks.

Sound design
Early on, to add audio-capabilities to my game engine I played around with some ideas from Mathieu 'p01' Henri, using a scriptProcessor in the webAudio API to render music in real-time. (codepen links, Mathieu Henri video talk links, ) It worked and it was SUPER tiny, but it ended up not being expressive enough for my needs so I fell back to using sonant-x again this year. The tracker is a bit clunky, doesn't allow for polyphony per channel, but the one feature I couldn't be without was the ability to export an instrument for use as a one-off sound effect. I had also looked at SoundBox, an upgrade to sonant, which featured a smaller player routine and polyphony per channel (chords!) but lacked the ability to export individual instruments


Graphics
  gamezero pixel engine
  trasevol, jake -noodle/planet guy, pico-8 screenshots, procedural dithering
  8 bit array buffer
  all my drawing happens on a 8bit integer array, then it's converted to RGB imageData every frame
  code examples
  I wanted to  be able to do that, so I began exploring whether or not I could pull that off in javascript, just as an experiment. When I discovered I could, I started writing other basic drawing api functions, and seeing how far I could push it performance-wise. Turns out it was more than performant enough for game making, and the indexed-color framebuffer made a lot of other game things easy:
  dynamic color palettes
  collision
  -screenshots of canvas api vs. aliased lines
